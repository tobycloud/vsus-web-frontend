diff --git a/bun.lockb b/bun.lockb
index 7e230c2..4485264 100755
Binary files a/bun.lockb and b/bun.lockb differ
diff --git a/package.json b/package.json
index dec2906..74a4090 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,6 @@
 {
   "name": "vsus-frontend",
-  "private": true,
-  "version": "0.0.0",
+  "version": "0.1.0",
   "type": "module",
   "scripts": {
     "dev": "vite --host",
@@ -10,10 +9,13 @@
     "preview": "vite preview"
   },
   "dependencies": {
+    "@tabler/icons-react": "^3.1.0",
     "@mantine/core": "^7.6.2",
     "@mantine/form": "^7.6.2",
     "@mantine/hooks": "^7.6.2",
     "@mantine/spotlight": "^7.6.2",
+    "@tanstack/react-query": "^5.51.9",
+    "pocketbase": "^0.21.1",
     "preact": "^10.19.7",
     "react-country-flag": "^3.1.0",
     "react-router-dom": "^6.22.3",
@@ -21,13 +23,11 @@
   },
   "devDependencies": {
     "@preact/preset-vite": "^2.8.2",
-    "@tabler/icons-react": "^3.1.0",
     "@typescript-eslint/eslint-plugin": "^7.3.1",
     "@typescript-eslint/parser": "^7.3.1",
     "eslint": "^8.57.0",
     "eslint-plugin-react-hooks": "^4.6.0",
     "eslint-plugin-react-refresh": "^0.4.6",
-    "pocketbase": "^0.21.1",
     "postcss": "^8.4.37",
     "postcss-preset-mantine": "^1.13.0",
     "postcss-simple-vars": "^7.0.1",
diff --git a/src/app.tsx b/src/app.tsx
index 87943d3..dfd6bf3 100644
--- a/src/app.tsx
+++ b/src/app.tsx
@@ -2,11 +2,12 @@ import { MantineProvider } from "@mantine/core";
 import { RouteObject, RouterProvider, createBrowserRouter } from "react-router-dom";
 import "./app.css";
 
-import { getAvatar, getBanner, getInstance, getUser, getUserFromUsername, getWorkspace } from "./database";
+import { getInstance, getUserByUsername, getWorkspace } from "./database";
 
+import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 import Content from "./components/Content";
 import AuthContent from "./components/Content/Auth";
-import { User } from "./database/models";
+import { PBInstance, PBUser, PBWorkspace } from "./database/models";
 import ForgotPassword from "./pages/Auth/ForgotPassword";
 import EnterResetPasswordCode from "./pages/Auth/ForgotPassword/EnterCode";
 import ResetPassword from "./pages/Auth/ForgotPassword/ResetPassword";
@@ -28,6 +29,14 @@ import SettingsPreferencesEditProfile from "./pages/Settings/Preferences/EditPro
 import WorkspaceHome from "./pages/Workspace";
 import WorkspaceOverview from "./pages/Workspace/Overview";
 
+const queryClient = new QueryClient({
+  defaultOptions: {
+    queries: {
+      refetchOnWindowFocus: false,
+    },
+  },
+});
+
 const routes: RouteObject[] = [
   {
     path: "/",
@@ -80,78 +89,47 @@ const routes: RouteObject[] = [
       {
         path: "/workspace/:workspaceId",
         element: <WorkspaceOverview />,
-        loader: async ({ params }) => {
+        loader: async ({ params }): Promise<PBWorkspace | undefined> => {
           const { workspaceId } = params;
           // Load workspace data
 
-          if (!workspaceId) return { workspace: null };
+          if (!workspaceId) return;
 
           try {
-            const workspace = await getWorkspace(workspaceId);
-            const ownerUser = (await getUser(workspace.owner)) as unknown as User;
-            ownerUser.avatar = await getAvatar(ownerUser);
-            const collaboratorsUsers = (await Promise.all(
-              workspace.collaborators.map(async (collaborator: string) => {
-                const collaboratorUser = await getUser(collaborator);
-                collaboratorUser.avatar = await getAvatar(collaboratorUser);
-                return collaboratorUser;
-              })
-            )) as User[];
-            workspace.users = [ownerUser, ...collaboratorsUsers];
-            const instances = await Promise.all(
-              workspace.instances.map(async (instanceId: string) => {
-                const instance = await getInstance(instanceId);
-                instance.owner = await getUser(instance.owner);
-                return instance;
-              })
-            );
-            workspace.instances = instances;
-            return { workspace: workspace };
+            return await queryClient.fetchQuery({ queryKey: ["workspace", workspaceId], queryFn: () => getWorkspace(workspaceId) });
           } catch (error) {
-            return { workspace: null };
+            return;
           }
         },
       },
       {
-        path: "/instance/:instanceId",
-        element: <Instance />,
-        loader: async ({ params }) => {
-          const { instanceId } = params;
-          if (!instanceId) return { instance: null };
+        path: "/user/:username",
+        element: <Profile />,
+        loader: async ({ params }): Promise<PBUser | undefined> => {
+          const { username } = params;
+          if (!username) return;
 
           try {
-            const instance = await getInstance(instanceId);
-            const ownerUser = (await getUser(instance.owner)) as unknown as User;
-            ownerUser.avatar = await getAvatar(ownerUser);
-            instance.owner = ownerUser;
-            const workspace = await getWorkspace(instance.workspace);
-            instance.workspace_name = workspace.name;
-            return { instance: instance };
+            return queryClient.fetchQuery({ queryKey: ["user", username], queryFn: () => getUserByUsername(username) });
           } catch (error) {
-            return { instance: null };
+            return;
           }
         },
       },
       {
-        path: "/user/:username",
-        element: <Profile />,
-        loader: async ({ params }) => {
-          const { username } = params;
-          if (!username) return { profile: null };
+        path: "/instance/:id",
+        element: <Instance />,
+        loader: async ({ params }): Promise<PBInstance | undefined> => {
+          const { id } = params;
+          if (!id) return;
 
           try {
-            const userList = await getUserFromUsername(username);
-            if (userList.length === 0) return { profile: null };
-            const user = userList[0];
-            user.avatar = (await getAvatar(user)) || "";
-            user.banner = (await getBanner(user)) || "";
-            return { profile: user };
+            return queryClient.fetchQuery({ queryKey: ["instance", id], queryFn: () => getInstance(id) });
           } catch (error) {
-            return { profile: null };
+            return;
           }
         },
       },
-
       {
         path: "*",
         element: <Error404 />,
@@ -191,24 +169,26 @@ const router = createBrowserRouter(routes);
 
 export default function App() {
   return (
-    <MantineProvider
-      defaultColorScheme="dark"
-      theme={{
-        colors: {
-          dark: ["#ffffff", "#e6e7e7", "#b3b8b8", "#99a0a0", "#4c5d61", "#1a3e42", "#1a3e42", "#00292d", "#1a292a", "#001112"],
-          primary: ["#ffffff", "#e6eaea", "#b3bfc0", "#99a9ab", "#809496", "#667f81", "#4d696c", "#335457", "#1a3e42", "#00292d"],
-          "vsus-natural": ["#E6FEFF", "#E6FEFF", "#E6FEFF", "#00A9BD", "#00A9BD", "#00A9BD", "#00292D", "#00292D", "#00292D", "#00292D"],
-          "vsus-button": ["#f0f9fa", "#e3f0f1", "#c0e2e3", "#9bd3d5", "#7dc5c8", "#6abdc1", "#5fbabe", "#4ea3a7", "#419195", "#2c7e82"],
-          "vsus-text": ["#ebfeff", "#d8fbfd", "#aaf8fc", "#7df5fb", "#62f2fb", "#56f1fb", "#4ef1fb", "#40d6e0", "#2fbfc7", "#00a5ad"],
-        },
-        primaryColor: "primary",
-        fontFamily: "Inter, sans-serif",
-        headings: {
+    <QueryClientProvider client={queryClient}>
+      <MantineProvider
+        defaultColorScheme="dark"
+        theme={{
+          colors: {
+            dark: ["#ffffff", "#e6e7e7", "#b3b8b8", "#99a0a0", "#4c5d61", "#1a3e42", "#1a3e42", "#00292d", "#1a292a", "#001112"],
+            primary: ["#ffffff", "#e6eaea", "#b3bfc0", "#99a9ab", "#809496", "#667f81", "#4d696c", "#335457", "#1a3e42", "#00292d"],
+            "vsus-natural": ["#E6FEFF", "#E6FEFF", "#E6FEFF", "#00A9BD", "#00A9BD", "#00A9BD", "#00292D", "#00292D", "#00292D", "#00292D"],
+            "vsus-button": ["#f0f9fa", "#e3f0f1", "#c0e2e3", "#9bd3d5", "#7dc5c8", "#6abdc1", "#5fbabe", "#4ea3a7", "#419195", "#2c7e82"],
+            "vsus-text": ["#ebfeff", "#d8fbfd", "#aaf8fc", "#7df5fb", "#62f2fb", "#56f1fb", "#4ef1fb", "#40d6e0", "#2fbfc7", "#00a5ad"],
+          },
+          primaryColor: "primary",
           fontFamily: "Inter, sans-serif",
-        },
-      }}
-    >
-      <RouterProvider router={router} />
-    </MantineProvider>
+          headings: {
+            fontFamily: "Inter, sans-serif",
+          },
+        }}
+      >
+        <RouterProvider router={router} />
+      </MantineProvider>
+    </QueryClientProvider>
   );
 }
diff --git a/src/components/CreateInstanceModal/index.tsx b/src/components/CreateInstanceModal/index.tsx
index 8ccbbf3..5b189d7 100644
--- a/src/components/CreateInstanceModal/index.tsx
+++ b/src/components/CreateInstanceModal/index.tsx
@@ -2,13 +2,13 @@ import { Alert, Box, Button, Combobox, Input, InputBase, Modal, TextInput, useCo
 import { hasLength, isNotEmpty, useForm } from "@mantine/form";
 import { useDisclosure } from "@mantine/hooks";
 import { IconInfoCircle } from "@tabler/icons-react";
-import { RecordModel } from "pocketbase";
-import { useEffect, useState } from "preact/hooks";
+import { useQuery, useQueryClient } from "@tanstack/react-query";
+import { useState } from "preact/hooks";
 import { useNavigate } from "react-router-dom";
-import pocketbase, { createInstance, getLimitWorkspaces } from "../../database";
-import { User } from "../../database/models";
+import pocketbase, { addInstanceToWorkspace, createInstance, getUserWorkspaces } from "../../database";
+import { PBUser, PBWorkspace } from "../../database/models";
 
-export default function CreateInstanceModal({ user, workspaceId }: { user: User; workspaceId?: string }): {
+export default function CreateInstanceModal({ user, workspace }: { user: PBUser; workspace?: PBWorkspace }): {
   element: JSX.Element;
   state: boolean;
   close: () => void;
@@ -17,12 +17,24 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
 } {
   const [opened, controls] = useDisclosure(false);
 
-  const form = useForm({
+  const queryClient = useQueryClient();
+
+  const workspaces = useQuery({
+    queryKey: ["workspaces", user],
+    queryFn: () => getUserWorkspaces(user),
+  });
+
+  const form = useForm<{
+    workspace?: PBWorkspace;
+    name: string;
+  }>({
     initialValues: {
+      workspace,
       name: "",
     },
 
     validate: {
+      workspace: isNotEmpty("Workspace is required"),
       name: isNotEmpty("Instance name is required") && hasLength({ min: 1, max: 25 }, "Name must be 1-25 characters long"),
     },
   });
@@ -35,18 +47,6 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
     onDropdownClose: () => combobox.resetSelectedOption(),
   });
 
-  const [value, setValue] = useState<string | null>(null);
-
-  const [workspaces, setWorkspaces] = useState<RecordModel[]>([]);
-
-  useEffect(() => {
-    opened &&
-      (async () => {
-        const workspaces = await getLimitWorkspaces(user, 1, 10);
-        setWorkspaces(workspaces);
-      })();
-  }, [opened]);
-
   return {
     element: (
       <Modal
@@ -54,7 +54,6 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
         onClose={() => {
           controls.close();
           form.reset();
-          workspaces.length = 0;
         }}
         title="Create a new Instance"
         centered
@@ -65,20 +64,18 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
           component="form"
           onSubmit={form.onSubmit(async () => {
             try {
-              const wId = workspaceId ?? workspaces.find((item) => item.name === value)?.id;
-              if (!wId) {
-                setError(true);
-                return;
-              }
-              console.log(wId);
-              const instance = await createInstance(user, form.values.name, wId);
-              if (!instance) {
-                setError(true);
-                return;
-              }
+              const instance = await createInstance(user, form.values.name, form.values.workspace!.id);
+              if (!instance) return setError(true);
+
+              addInstanceToWorkspace(form.values.workspace!, instance);
+
               setError(false);
+              queryClient.invalidateQueries({ queryKey: ["instances", user] });
+              queryClient.invalidateQueries({ queryKey: ["workspace", form.values.workspace!.id] });
+
               pocketbase.collection("users").authRefresh();
               navigate(`/instance/${instance.id}`);
+
               controls.close();
               form.reset();
             } catch (error) {
@@ -92,11 +89,15 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
             </Alert>
           )}
           <TextInput {...form.getInputProps("name")} placeholder="Instance name" mb="md" />
-          {!workspaceId && (
+          {!workspace && (
             <Combobox
               store={combobox}
-              onOptionSubmit={(val) => {
-                setValue(val);
+              onOptionSubmit={(id) => {
+                const workspace = workspaces.data?.items.find((item) => item.id === id);
+                if (!workspace) return;
+
+                form.setFieldValue("workspace", workspace);
+
                 combobox.closeDropdown();
               }}
             >
@@ -110,15 +111,15 @@ export default function CreateInstanceModal({ user, workspaceId }: { user: User;
                   rightSectionPointerEvents="none"
                   onClick={() => combobox.toggleDropdown()}
                 >
-                  {value || <Input.Placeholder>Workspace name</Input.Placeholder>}
+                  {form.values.workspace || <Input.Placeholder>Workspace</Input.Placeholder>}
                 </InputBase>
               </Combobox.Target>
 
               <Combobox.Dropdown>
                 <Combobox.Options>
                   {workspaces ? (
-                    workspaces.map((item) => (
-                      <Combobox.Option value={item.name} key={item.id}>
+                    (workspaces.data?.items ?? []).map((item) => (
+                      <Combobox.Option value={item.id} key={item.id}>
                         {item.name}
                       </Combobox.Option>
                     ))
diff --git a/src/components/CreateWorkspaceModal/index.tsx b/src/components/CreateWorkspaceModal/index.tsx
index 6621615..4bc52f5 100644
--- a/src/components/CreateWorkspaceModal/index.tsx
+++ b/src/components/CreateWorkspaceModal/index.tsx
@@ -5,9 +5,9 @@ import { IconInfoCircle } from "@tabler/icons-react";
 import { useState } from "preact/hooks";
 import { useNavigate } from "react-router-dom";
 import pocketbase, { createWorkspace } from "../../database";
-import { User } from "../../database/models";
+import { PBUser } from "../../database/models";
 
-export default function CreateWorkspaceModal({ user }: { user: User }): {
+export default function CreateWorkspaceModal({ user }: { user: PBUser }): {
   element: JSX.Element;
   state: boolean;
   close: () => void;
@@ -47,14 +47,15 @@ export default function CreateWorkspaceModal({ user }: { user: User }): {
           component="form"
           onSubmit={form.onSubmit(async () => {
             try {
+              // need to do cache invalidation here
+
               const workspace = await createWorkspace(user, form.values.name);
-              if (!workspace) {
-                setError(true);
-                return;
-              }
+              if (!workspace) return setError(true);
+
               setError(false);
               pocketbase.collection("users").authRefresh();
               navigate(`/workspace/${workspace.id}`);
+
               controls.close();
               form.reset();
             } catch (error) {
diff --git a/src/components/Header/index.tsx b/src/components/Header/index.tsx
index 75d7fce..6e89cc6 100644
--- a/src/components/Header/index.tsx
+++ b/src/components/Header/index.tsx
@@ -3,10 +3,10 @@ import { ActionIcon, Avatar, Box, Code, Flex, Group, Indicator, Text, Tooltip, U
 import { useDisclosure, useMediaQuery } from "@mantine/hooks";
 import { spotlight } from "@mantine/spotlight";
 import { IconInbox, IconMenu2, IconSearch } from "@tabler/icons-react";
-import { useEffect, useState } from "preact/hooks";
+import { useEffect } from "preact/hooks";
 import { Link, useNavigate } from "react-router-dom";
-import pocketbase, { getAvatar } from "../../database";
-import { User } from "../../database/models";
+import pocketbase from "../../database";
+import { PBUser } from "../../database/models";
 import { borderLine } from "../../utils";
 import CreateInstanceModal from "../CreateInstanceModal";
 import CreateNewDropdown from "../CreateNewDropdown";
@@ -18,8 +18,7 @@ import SearchMenu from "../SearchMenu";
 import classes from "./index.module.css";
 
 export function Header() {
-  const user = pocketbase.authStore.model as User;
-  if (!user) return null;
+  const user = pocketbase.authStore.model as PBUser;
 
   const isMobile = useMediaQuery("(max-width: 62em)");
 
@@ -29,7 +28,7 @@ export function Header() {
 
   const [openedLeft, { open: openLeft, close: closeLeft }] = useDisclosure(false);
 
-  const [avatar, setAvatar] = useState<string | null>(null);
+  if (!user) return null;
 
   const createWorkspace = CreateWorkspaceModal({ user });
 
@@ -47,11 +46,6 @@ export function Header() {
       });
   }, []);
 
-  useEffect(() => {
-    if (!user) return;
-    setAvatar(getAvatar(user));
-  }, [user]);
-
   return (
     <>
       {createWorkspace.element}
@@ -92,13 +86,13 @@ export function Header() {
                 </ActionIcon>
               </Tooltip>
             </Indicator>
-            <Avatar src={avatar} onClick={openRight} />
+            <Avatar src={pocketbase.getFileUrl(user, user.avatar)} onClick={openRight} />
           </Group>
         </Flex>
       </header>
       <SearchMenu />
       <LeftNavBar opened={openedLeft} close={closeLeft} />
-      <RightNavBar opened={openedRight} close={closeRight} username={user?.username} name={user?.name} avatar={avatar} />
+      <RightNavBar opened={openedRight} close={closeRight} />
     </>
   );
 }
diff --git a/src/components/LeftNavBar/index.tsx b/src/components/LeftNavBar/index.tsx
index 53816f4..afd05fc 100644
--- a/src/components/LeftNavBar/index.tsx
+++ b/src/components/LeftNavBar/index.tsx
@@ -1,29 +1,25 @@
 import { Box, Divider, Drawer, Flex, Group, NavLink, Text } from "@mantine/core";
 import { IconDeviceDesktopAnalytics, IconHome, IconSearch } from "@tabler/icons-react";
-import { RecordModel } from "pocketbase";
-import { useEffect, useState } from "preact/hooks";
+import { useQuery } from "@tanstack/react-query";
 import { Link } from "react-router-dom";
-import pocketbase, { getLimitWorkspaces } from "../../database";
-import { User } from "../../database/models";
+import pocketbase, { getUserWorkspaces } from "../../database";
+import { PBUser } from "../../database/models";
 import Logo from "../Logo";
 
 export default function LeftNavBar({ opened, close }: { opened: boolean; close: () => void }) {
-  const [workspaces, setWorkspaces] = useState<RecordModel[]>([]);
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
 
-  const fetchWorkspaces = async () => {
-    setWorkspaces(await getLimitWorkspaces(user, 0, 5));
-  };
+  const workspacesQuery = useQuery({
+    queryKey: ["workspaces", user],
+    queryFn: () => getUserWorkspaces(user, { sort: "-updated", perPage: 5 }),
+  });
 
-  useEffect(() => {
-    fetchWorkspaces();
-  }, []);
-
-  useEffect(() => {
-    const location = window.location.pathname.split("/");
-    if (location[1] !== "workspace") return;
-    if (!workspaces.map((workspace) => workspace.id).includes(location[2])) fetchWorkspaces();
-  }, [window.location.pathname]); // handle workspace addition
+  // useEffect(() => {
+  //   const location = window.location.pathname.split("/");
+  //   if (location[1] !== "workspace") return;
+  //   if (!workspaces.map((workspace) => workspace.id).includes(location[2])) fetchWorkspaces();
+  // }, [window.location.pathname]); // handle workspace addition
+  // prob no need with react-query now
 
   return (
     <>
@@ -48,7 +44,7 @@ export default function LeftNavBar({ opened, close }: { opened: boolean; close:
                 <IconSearch size={16} style={{ color: "var(--mantine-color-dimmed)" }} />
               </Flex>
               <Flex direction="column">
-                {workspaces.map((workspace) => (
+                {(workspacesQuery.data?.items ?? []).map((workspace) => (
                   <NavLink
                     key={workspace.id}
                     leftSection={<IconDeviceDesktopAnalytics size={20} />}
@@ -58,7 +54,7 @@ export default function LeftNavBar({ opened, close }: { opened: boolean; close:
                     onClick={() => close()}
                   />
                 ))}
-                {workspaces.length === 0 && (
+                {workspacesQuery.data?.items.length === 0 && (
                   <Text size="sm" style={{ padding: "calc(0.5rem* var(--mantine-scale)) var(--mantine-spacing-sm)" }}>
                     No workspaces
                   </Text>
diff --git a/src/components/RightNavBar/index.tsx b/src/components/RightNavBar/index.tsx
index b20093c..6885b29 100644
--- a/src/components/RightNavBar/index.tsx
+++ b/src/components/RightNavBar/index.tsx
@@ -13,27 +13,15 @@ import {
 } from "@tabler/icons-react";
 import { Link, useNavigate } from "react-router-dom";
 import pocketbase from "../../database";
-import { User } from "../../database/models";
+import { PBUser } from "../../database/models";
 import CreateInstanceModal from "../CreateInstanceModal";
 import CreateNewDropdown from "../CreateNewDropdown";
 import CreateWorkspaceModal from "../CreateWorkspaceModal";
 
-export default function RightNavBar({
-  opened,
-  close,
-  username,
-  name,
-  avatar,
-}: {
-  opened: boolean;
-  close: () => void;
-  username: string;
-  name: string;
-  avatar: string | null;
-}) {
+export default function RightNavBar({ opened, close }: { opened: boolean; close: () => void }) {
   const [signOutModalOpened, { open: openSignOutModal, close: closeSignOutModal }] = useDisclosure(false);
   const navigate = useNavigate();
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
   const createWorkspace = CreateWorkspaceModal({ user });
   const createInstance = CreateInstanceModal({ user });
 
@@ -47,14 +35,14 @@ export default function RightNavBar({
           <Drawer.Header>
             <Drawer.Title>
               <Group gap="sm">
-                <Avatar src={avatar} alt={name} radius="xl" size="md" />
+                <Avatar src={pocketbase.getFileUrl(user, user.avatar)} alt={user.name} radius="xl" size="md" />
                 <Box>
                   <Text size="lg" lineClamp={1}>
-                    {username}
+                    {user.username}
                   </Text>
-                  {name != "" && (
+                  {user.name != "" && (
                     <Text size="xs" c="dimmed" lineClamp={1}>
-                      {name}
+                      {user.name}
                     </Text>
                   )}
                 </Box>
@@ -79,7 +67,7 @@ export default function RightNavBar({
           <Drawer.Body>
             <NavLink
               component={Link}
-              to={`/user/${username}`}
+              to={`/user/${user.username}`}
               label="Your profile"
               leftSection={<IconUser size="1rem" stroke={1.5} />}
               onClick={() => close()}
diff --git a/src/database/constants.ts b/src/database/constants.ts
deleted file mode 100644
index 388f632..0000000
--- a/src/database/constants.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-const Constants = Object.freeze({
-  PocketBaseURL: "https://pocketbase.vsus.app",
-});
-
-export default Constants;
diff --git a/src/database/index.ts b/src/database/index.ts
index f70f315..6872cf4 100644
--- a/src/database/index.ts
+++ b/src/database/index.ts
@@ -1,8 +1,7 @@
-import PocketBase, { RecordModel } from "pocketbase";
-import Constants from "./constants";
-import { User } from "./models";
+import PocketBase, { ListResult, RecordListOptions } from "pocketbase";
+import { PBInstance, PBUser, PBWorkspace, User } from "./models";
 
-const pocketbase = new PocketBase(Constants.PocketBaseURL);
+const pocketbase = new PocketBase(import.meta.env.VITE_POCKETBASE_URL);
 export default pocketbase;
 
 export async function userSignIn(email: string, password: string) {
@@ -21,63 +20,49 @@ export async function userSignInOAuth2(provider: string) {
   });
 }
 
-export async function userSignUp(data: object) {
+// TODO: actually use User with proper optional fields
+export async function userSignUp(data: any) {
   pocketbase.authStore.clear();
   await pocketbase.collection("users").create(data);
 }
 
-export async function getUser(id: string) {
-  return pocketbase.collection("users").getOne(id, { requestKey: null });
+export async function getUser(id: string): Promise<PBUser> {
+  return pocketbase.collection<PBUser>("users").getOne(id, { expand: "followers,following" });
 }
 
-export async function getUserFromUsername(username: string) {
-  return pocketbase.collection("users").getFullList({
-    filter: `username = "${username}"`,
-  });
+export async function getUserByUsername(username: string): Promise<PBUser> {
+  return pocketbase.collection<PBUser>("users").getFirstListItem(`username = "${username}"`, { expand: "followers,following" });
 }
 
-export function getAvatar(user: RecordModel | User) {
+export function getAvatar(user: User): string {
   return pocketbase.getFileUrl(user, user.avatar);
 }
 
-export function getBanner(user: RecordModel | User) {
-  return pocketbase.getFileUrl(user, user.banner);
+export async function getUserWorkspaces(
+  user: PBUser,
+  options?: RecordListOptions & { page?: number; perPage?: number }
+): Promise<ListResult<PBWorkspace>> {
+  return await pocketbase
+    .collection<PBWorkspace>("workspaces")
+    .getList(options?.page ?? 0, options?.perPage ?? 500, { filter: `owner = "${user.id}"`, expand: "owner,collaborators,instances", ...options });
 }
 
-export async function getUserWorkspaces(user: User) {
-  return await pocketbase.collection("workspaces").getFullList({
-    filter: `owner = "${user.id}"`,
-  });
+export async function createWorkspace(user: PBUser, name: string): Promise<PBWorkspace> {
+  return await pocketbase.collection<PBWorkspace>("workspaces").create({ name, owner: user.id }, { expand: "owner,collaborators,instances" });
 }
 
-export async function createWorkspace(user: User, name: string) {
-  return await pocketbase.collection("workspaces").create({
-    name,
-    owner: user.id,
-  });
+export async function getWorkspace(id: string): Promise<PBWorkspace> {
+  return await pocketbase.collection<PBWorkspace>("workspaces").getOne(id, { expand: "owner,collaborators,instances" });
 }
 
-export async function createInstance(user: User, name: string, workspace: string) {
-  return await pocketbase.collection("instances").create({
-    name,
-    owner: user.id,
-    workspace,
-  });
+export async function addInstanceToWorkspace(workspace: PBWorkspace, instance: PBInstance) {
+  await pocketbase.collection<PBWorkspace>("workspaces").update(workspace.id, { instances: [...workspace.instances, instance.id] });
 }
 
-export async function getWorkspace(id: string) {
-  return await pocketbase.collection("workspaces").getOne(id);
-}
-
-export async function getLimitWorkspaces(user: User, min: number, max: number) {
-  const listResult = await pocketbase.collection("workspaces").getList(min, max, {
-    sort: "-updated",
-    filter: `owner = "${user.id}"`,
-    requestKey: null,
-  });
-  return listResult.items;
+export async function createInstance(user: PBUser, name: string, workspace: string): Promise<PBInstance> {
+  return await pocketbase.collection<PBInstance>("instances").create({ name, owner: user.id, workspace }, { expand: "owner,workspace" });
 }
 
-export async function getInstance(id: string) {
-  return await pocketbase.collection("instances").getOne(id);
+export async function getInstance(id: string): Promise<PBInstance> {
+  return await pocketbase.collection<PBInstance>("instances").getOne(id, { expand: "owner,workspace" });
 }
diff --git a/src/database/models.ts b/src/database/models.ts
index 344a5d2..aa01fac 100644
--- a/src/database/models.ts
+++ b/src/database/models.ts
@@ -1,45 +1,66 @@
+import { RecordModel } from "pocketbase";
+
+export type PBID = string; // PocketBase ID, 15 chars
+export type PBFile = string; // PocketBase File, needs to be converted to URL with pocketbase.getFileUrl
+
 export interface User {
-  id: string;
-  verified: boolean;
   username: string;
   email: string;
   emailVisibility: boolean;
+  verified: boolean;
+
   name: string;
-  aboutMe: string;
-  avatar: string;
-  banner: string;
   pronouns: string;
-  created: string;
+  aboutMe: string;
+  followers: PBID[];
+  following: PBID[];
+  location: string;
+  organization: string;
   phoneNumber: string;
   phoneNumberVisibility: boolean;
+
+  avatar: string;
+  banner: string;
   plan: string;
-  location: string;
-  organization: string;
+  badges: string[];
   planVisibility: boolean;
   badgesVisibility: boolean;
-  badges: string[];
-  followers: string[];
-  following: string[];
-  expanded: boolean;
-} // khai tử these things soon
+
+  expand: {
+    // 1 level deep, remember to fetch with getUser again to expand deeper
+    followers?: PBUser[];
+    following?: PBUser[];
+  };
+}
+
+export type PBUser = RecordModel & User;
 
 export interface Workspace {
-  id: string;
-  owner: User;
-  collaborators: User[];
-  users: User[];
-  instances: Instance[];
-  name: string;
-  created: string;
-  updated: string;
+  name: string; // non-empty
+  owner: PBID; // required
+  collaborators: PBID[]; // could be empty
+  instances: PBID[]; // could be empty
+
+  expand: {
+    owner: PBUser;
+    collaborators?: PBUser[];
+    instances?: PBInstance[];
+  };
 }
 
+export type PBWorkspace = RecordModel & Workspace;
+
 export interface Instance {
-  id: string;
-  owner: User;
-  workspace: string;
-  workspace_name: string;
+  owner: PBID;
+  workspace: PBID;
   name: string;
   docker_id: string;
   on_off: boolean;
+
+  expand: {
+    owner: PBUser;
+    workspace: PBWorkspace;
+  };
 }
+
+export type PBInstance = RecordModel & Instance;
diff --git a/src/pages/Home/index.tsx b/src/pages/Home/index.tsx
index 29a7fa8..a5937bc 100644
--- a/src/pages/Home/index.tsx
+++ b/src/pages/Home/index.tsx
@@ -1,9 +1,5 @@
-import { Avatar, Box, Button, Container, Divider, Flex, Group, Menu, Text, Title, UnstyledButton, rem } from "@mantine/core";
-import { IconAdjustments, IconDots, IconMessageExclamation, IconMessageOff, IconMoodSmile, IconUserMinus } from "@tabler/icons-react";
-import { useEffect, useState } from "preact/hooks";
-import { Link } from "react-router-dom";
-import UserHoverCard from "../../components/UserHoverCard";
-import { getAvatar, getUserFromUsername } from "../../database";
+import { Container, Divider, Flex, Title } from "@mantine/core";
+import { useEffect } from "preact/hooks";
 import { User } from "../../database/models";
 import { setDocumentTitle } from "../../utils";
 import Loading from "../Loading";
@@ -13,29 +9,19 @@ export default function Home() {
     setDocumentTitle("Home");
   }, []);
 
-  const tobyPostReactions = {
-    "😭": 26,
-    "😂": 5,
-    "🤯": 3,
-  };
+  // const tobyPostReactions = {
+  //   "😭": 26,
+  //   "😂": 5,
+  //   "🤯": 3,
+  // };
 
   // Things to note:
   // - Eggu is not sure if multiple reactions is a good idea, and how to implement it in PB
   // - Eggu wants these posts to be the same as those on GitHub, not those on X => Displaying activities instead of self-posted posts
   // - Eggu wants to display the activities in a timeline (that is, chronological order)
 
-  const [user, setUser] = useState<User>();
-
-  useEffect(() => {
-    const setToby = async () => {
-      const userList = await getUserFromUsername("toby");
-      const user = userList[0] as unknown as User;
-      user.avatar = await getAvatar(user);
-      setUser(user);
-    };
-
-    setToby();
-  }, []);
+  // @ts-ignore for now
+  const user: User | undefined = {};
 
   if (!user) return <Loading />;
 
@@ -43,12 +29,12 @@ export default function Home() {
     <Container>
       <Flex justify="space-between">
         <Title order={2}>Home</Title>
-        <Button variant="light" color="primary" radius="md" leftSection={<IconAdjustments size={20} />} fw={500}>
+        {/* <Button variant="light" color="primary" radius="md" leftSection={<IconAdjustments size={20} />} fw={500}>
           Filter
-        </Button>
+        </Button> */}
       </Flex>
       <Divider my="lg" />
-      <Box p="lg" bg="dark" style={{ borderRadius: "var(--mantine-radius-lg)" }} mb="lg">
+      {/* <Box p="lg" bg="dark" style={{ borderRadius: "var(--mantine-radius-lg)" }} mb="lg">
         <Flex justify="space-between" align="center">
           <Group gap="sm">
             <UserHoverCard profile={user}>
@@ -106,7 +92,7 @@ export default function Home() {
             </Button>
           ))}
         </Group>
-      </Box>
+      </Box> */}
     </Container>
   );
 }
diff --git a/src/pages/Instance/index.tsx b/src/pages/Instance/index.tsx
index de6b621..0fe08f5 100644
--- a/src/pages/Instance/index.tsx
+++ b/src/pages/Instance/index.tsx
@@ -27,7 +27,7 @@ export default function Instance() {
         style={{ textDecoration: "none", color: "var(--mantine-color-primary-text)" }}
       >
         <IconChevronLeft size={20} />
-        <Text>{instance.workspace_name}</Text>
+        <Text>{instance.expand.workspace.name}</Text>
       </Group>
 
       <Flex justify="space-between">
@@ -41,8 +41,8 @@ export default function Instance() {
       </Flex>
       <Group mt="lg" gap="xs">
         <IconUserCode size={25} style={{ color: "var(--mantine-color-dimmed)" }} />
-        <UserHoverCard profile={instance.owner} workspaceOwner>
-          <Avatar src={instance.owner.avatar} component={Link} to={`/user/${instance.owner.username}`} />
+        <UserHoverCard profile={instance.expand.owner} workspaceOwner>
+          <Avatar src={instance.expand.owner.avatar} component={Link} to={`/user/${instance.expand.owner.username}`} />
         </UserHoverCard>
       </Group>
       <Divider my="lg" />
diff --git a/src/pages/Profile/Follow/index.tsx b/src/pages/Profile/Follow/index.tsx
index 2e35bab..4a981c7 100644
--- a/src/pages/Profile/Follow/index.tsx
+++ b/src/pages/Profile/Follow/index.tsx
@@ -1,23 +1,27 @@
 import { Avatar, Box, Button, Divider, Flex, Grid, Group, Text, Title } from "@mantine/core";
 import { useMediaQuery } from "@mantine/hooks";
 import { IconBuilding, IconMapPin } from "@tabler/icons-react";
-import { useEffect, useState } from "preact/hooks";
+import { useQuery } from "@tanstack/react-query";
+import { useEffect } from "preact/hooks";
 import { Link } from "react-router-dom";
 import UserHoverCard from "../../../components/UserHoverCard";
 import pocketbase, { getAvatar, getUser } from "../../../database";
-import { User } from "../../../database/models";
+import { PBUser, User } from "../../../database/models";
 import Loading from "../../Loading";
 
 export default function ProfileFollow({ followers, following }: { followers?: string[]; following?: string[] }) {
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
 
   const isVertical = useMediaQuery(`(max-width: 62em)`);
 
   if (!followers && !following) return <Loading />;
 
-  const people = followers ?? following ?? [];
+  const peopleIds: string[] = followers ?? following ?? [];
 
-  const [peopleUsers, setPeopleUsers] = useState<User[]>([]);
+  const peopleQuery = useQuery({
+    queryKey: [followers?.length > 0 ? "followers" : "following", ""],
+    queryFn: () => Promise.all(peopleIds.map((id) => getUser(id))),
+  });
 
   useEffect(() => {
     const fetchPeople = async () => {
diff --git a/src/pages/Profile/index.tsx b/src/pages/Profile/index.tsx
index c741989..089c5b0 100644
--- a/src/pages/Profile/index.tsx
+++ b/src/pages/Profile/index.tsx
@@ -1,19 +1,18 @@
-import { Anchor, Avatar, Blockquote, Box, Button, Divider, Flex, Grid, Group, Image, Text, Title } from "@mantine/core";
+import { Anchor, Avatar, Box, Button, Divider, Flex, Grid, Group, Image, Text, Title } from "@mantine/core";
 import { useMediaQuery } from "@mantine/hooks";
-import { IconInfoCircle, IconMail, IconPhone, IconUsersGroup } from "@tabler/icons-react";
+import { IconMail, IconPhone, IconUsersGroup } from "@tabler/icons-react";
 import { useEffect, useState } from "preact/hooks";
 import { Link, useLoaderData } from "react-router-dom";
 import pocketbase from "../../database";
-import { User } from "../../database/models";
+import { PBUser } from "../../database/models";
 import { setDocumentTitle } from "../../utils";
 import Error404 from "../Error/404";
-import ProfileFollow from "./Follow";
 import classes from "./index.module.css";
 
 export default function Profile() {
   const isMobile = useMediaQuery(`(max-width: 36em)`);
-  const { profile } = useLoaderData() as { profile: User };
-  const user = pocketbase.authStore.model as User;
+  const profile = useLoaderData() as PBUser | undefined;
+  const user = pocketbase.authStore.model as PBUser;
 
   if (!profile) return <Error404 />;
 
@@ -138,7 +137,7 @@ export default function Profile() {
             </Box>
           </Flex>
         </Grid.Col>
-        <Grid.Col span={{ base: 12, md: 7.5, lg: 8 }} mt={{ md: "lg" }}>
+        {/* <Grid.Col span={{ base: 12, md: 7.5, lg: 8 }} mt={{ md: "lg" }}>
           {(() => {
             switch (currentTab) {
               case "followers":
@@ -169,7 +168,7 @@ export default function Profile() {
                 );
             }
           })()}
-        </Grid.Col>
+        </Grid.Col> */}
       </Grid>
     </Box>
   );
diff --git a/src/pages/Settings/Preferences/EditProfile/index.tsx b/src/pages/Settings/Preferences/EditProfile/index.tsx
index 95daaaa..f94cecf 100644
--- a/src/pages/Settings/Preferences/EditProfile/index.tsx
+++ b/src/pages/Settings/Preferences/EditProfile/index.tsx
@@ -24,14 +24,14 @@ import { useNavigate } from "react-router-dom";
 import { useFilePicker } from "use-file-picker";
 import { FileAmountLimitValidator, FileSizeValidator, FileTypeValidator } from "use-file-picker/validators";
 import BackButton from "../../../../components/BackButton";
-import pocketbase, { getAvatar, getBanner } from "../../../../database";
-import { User } from "../../../../database/models";
+import pocketbase from "../../../../database";
+import { PBUser } from "../../../../database/models";
 import { base64toFile } from "../../../../utils";
 
 const SettingsPreferencesEditProfile = () => {
   const isMobile = useMediaQuery(`(max-width: 36em)`);
 
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
 
   const fromProfile = new URLSearchParams(window.location.search).get("fromProfile");
 
@@ -53,16 +53,9 @@ const SettingsPreferencesEditProfile = () => {
 
   const [errorWhileUpdating, setErrorWhileUpdating] = useState<string>("");
 
-  const [avatar, setAvatar] = useState<string | null>(null);
+  const [avatar, setAvatar] = useState<string>(pocketbase.getFileUrl(user, user.avatar));
 
-  const [banner, setBanner] = useState<string | null>(null);
-
-  useEffect(() => {
-    if (!user) return;
-
-    setAvatar(getAvatar(user));
-    setBanner(getBanner(user));
-  }, []);
+  const [banner, setBanner] = useState<string>(pocketbase.getFileUrl(user, user.banner));
 
   const {
     openFilePicker: openAvatarFilePicker,
@@ -127,8 +120,8 @@ const SettingsPreferencesEditProfile = () => {
     bannerFilesContent.length = 0;
     bannerErrors.length = 0;
     if (!user) return;
-    setAvatar(getAvatar(user));
-    setBanner(getBanner(user));
+    setAvatar(pocketbase.getFileUrl(user, user.avatar));
+    setBanner(pocketbase.getFileUrl(user, user.banner));
   };
 
   const [buttonLoading, setButtonLoading] = useState(false);
@@ -156,7 +149,7 @@ const SettingsPreferencesEditProfile = () => {
             <Menu.Item
               leftSection={<IconTrash style={{ width: rem(14), height: rem(14) }} />}
               onClick={() => {
-                setAvatar(null);
+                setAvatar("");
               }}
             >
               Remove photo
@@ -200,7 +193,7 @@ const SettingsPreferencesEditProfile = () => {
             <Menu.Item
               leftSection={<IconTrash style={{ width: rem(14), height: rem(14) }} />}
               onClick={() => {
-                setBanner(null);
+                setBanner("");
               }}
             >
               Remove photo
diff --git a/src/pages/Workspace/Overview/index.tsx b/src/pages/Workspace/Overview/index.tsx
index e2a0513..6bb6c03 100644
--- a/src/pages/Workspace/Overview/index.tsx
+++ b/src/pages/Workspace/Overview/index.tsx
@@ -1,49 +1,37 @@
-import { ActionIcon, Avatar, Box, Button, Center, Container, CopyButton, Divider, Flex, Grid, Group, Text, Title, Tooltip, rem } from "@mantine/core";
+import { ActionIcon, Avatar, Box, Button, Center, Container, Divider, Flex, Grid, Group, Text, Title, Tooltip, rem } from "@mantine/core";
 import { useMediaQuery } from "@mantine/hooks";
-import { IconAdjustments, IconCheck, IconCircleFilled, IconCopy, IconDeviceDesktopAnalytics, IconPlus, IconUserCode } from "@tabler/icons-react";
+import { IconAdjustments, IconCircleFilled, IconDeviceDesktopAnalytics, IconPlus, IconUserCode } from "@tabler/icons-react";
 import { useEffect } from "preact/hooks";
 import { Link, useLoaderData } from "react-router-dom";
 import CreateInstanceModal from "../../../components/CreateInstanceModal";
 import UserHoverCard from "../../../components/UserHoverCard";
 import pocketbase from "../../../database";
-import { User, Workspace } from "../../../database/models";
+import { PBUser, PBWorkspace } from "../../../database/models";
 import { setDocumentTitle } from "../../../utils";
 import Error404 from "../../Error/404";
 import classes from "./index.module.css";
 
-const data = [
-  {
-    title: "Instances",
-    number: 5,
-  },
-  {
-    title: "Blocks",
-    number: 4,
-  },
-  {
-    title: "Deployments",
-    number: 5,
-  },
-  {
-    title: "CI/CD Jobs",
-    number: 2,
-  },
-];
-
 export default function WorkspaceOverview() {
   const isMobile = useMediaQuery(`(max-width: 36em)`);
-  const { workspace } = useLoaderData() as { workspace: Workspace };
+  const workspace = useLoaderData() as PBWorkspace;
 
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
 
   if (!workspace) return <Error404 />;
 
+  const data: Record<string, any> = {
+    Instances: workspace.instances.length,
+    Blocks: 0,
+    Deployments: 0,
+    "CI/CD Jobs": 0,
+  };
+
   // eslint-disable-next-line react-hooks/rules-of-hooks
   useEffect(() => {
     setDocumentTitle(`${workspace.name} | Workspace`);
   }, [workspace]);
 
-  const createInstance = CreateInstanceModal({ user, workspaceId: workspace.id });
+  const createInstance = CreateInstanceModal({ user, workspace });
 
   return (
     <>
@@ -60,22 +48,20 @@ export default function WorkspaceOverview() {
         </Flex>
         <Group mt="lg" gap="xs">
           <IconUserCode size={25} style={{ color: "var(--mantine-color-dimmed)" }} />
-          {workspace.users.map((user: User, index: number) => {
-            return (
-              <UserHoverCard profile={user} workspaceOwner={index == 0}>
-                <Avatar src={user.avatar} component={Link} to={`/user/${user.username}`} />
-              </UserHoverCard>
-            );
-          })}
+          {(workspace.expand.collaborators ?? []).concat([workspace.expand.owner]).map((user, index) => (
+            <UserHoverCard profile={user} workspaceOwner={index == 0} key={user.id}>
+              <Avatar src={pocketbase.getFileUrl(user, user.avatar)} component={Link} to={`/user/${user.username}`} />
+            </UserHoverCard>
+          ))}
         </Group>
         <Divider my="lg" />
         <Title order={3}>Overview</Title>
         <Grid mt="md" mb="xl">
-          {data.map((item) => (
-            <Grid.Col span={{ base: 12, xs: 6, md: 3 }}>
+          {Object.entries(data).map(([key, value]) => (
+            <Grid.Col span={{ base: 12, xs: 6, md: 3 }} key={key}>
               <Box p="lg" bg="dark" style={{ borderRadius: "var(--mantine-radius-md)" }}>
-                <Title order={3}>{item.title}</Title>
-                <Text style={{ fontSize: "calc(1.5*var(--mantine-font-size-xl))" }}>{item.number}</Text>
+                <Title order={3}>{key}</Title>
+                <Text style={{ fontSize: "calc(1.5*var(--mantine-font-size-xl))" }}>{value}</Text>
               </Box>
             </Grid.Col>
           ))}
@@ -84,8 +70,8 @@ export default function WorkspaceOverview() {
           Instances
         </Title>
         <Grid mt="md" mb="xl">
-          {workspace.instances.map((item) => (
-            <Grid.Col span={{ base: 12, md: 6 }}>
+          {(workspace.expand.instances ?? []).map((item) => (
+            <Grid.Col span={{ base: 12, md: 6 }} key={item.id}>
               <Box p="lg" bg="dark" style={{ borderRadius: "var(--mantine-radius-md)" }}>
                 <Flex justify="space-between" direction={isMobile ? "column" : "row"}>
                   <Flex direction="column" justify="space-between" mr={isMobile ? "0" : "sm"} mb={isMobile ? "sm" : "0"}>
@@ -99,7 +85,7 @@ export default function WorkspaceOverview() {
                         </Tooltip>
                       )}
                     </Group>
-                    <Group gap="xs">
+                    {/* <Group gap="xs">
                       <Text>
                         <span style={{ color: "var(--mantine-color-dimmed)" }}>IP:</span> 20.20.20.20
                       </Text>
@@ -112,7 +98,7 @@ export default function WorkspaceOverview() {
                           </Tooltip>
                         )}
                       </CopyButton>
-                    </Group>
+                    </Group> */}
                   </Flex>
                   <Box>
                     <Text>
diff --git a/src/pages/Workspace/index.tsx b/src/pages/Workspace/index.tsx
index 3b399c5..085be65 100644
--- a/src/pages/Workspace/index.tsx
+++ b/src/pages/Workspace/index.tsx
@@ -1,38 +1,30 @@
 import { Avatar, Box, Button, Center, Container, Divider, Grid, Group, Text, Title } from "@mantine/core";
 import { IconDeviceDesktopAnalytics, IconPlus } from "@tabler/icons-react";
-import { RecordModel } from "pocketbase";
-import { useEffect, useState } from "preact/hooks";
+import { useQuery } from "@tanstack/react-query";
+import { useEffect } from "preact/hooks";
 import { Link } from "react-router-dom";
 import CreateWorkspaceModal from "../../components/CreateWorkspaceModal";
-import pocketbase, { getAvatar, getLimitWorkspaces, getUser } from "../../database";
-import { User } from "../../database/models";
+import pocketbase, { getUserWorkspaces } from "../../database";
+import { PBUser } from "../../database/models";
 import { setDocumentTitle } from "../../utils";
 import Loading from "../Loading";
 import classes from "./index.module.css";
 
 export default function WorkspaceHome() {
-  const user = pocketbase.authStore.model as User;
+  const user = pocketbase.authStore.model as PBUser;
 
-  const [workspaces, setWorkspaces] = useState<RecordModel[]>([]);
+  const workspacesQuery = useQuery({
+    queryKey: ["workspaces", user],
+    queryFn: () => getUserWorkspaces(user, { sort: "-updated", perPage: 5 }),
+  });
 
   useEffect(() => {
-    const fetchWorkspaces = async () => {
-      const workspaces = await getLimitWorkspaces(user, 0, 5);
-      for (const workspace of workspaces) {
-        const ownerAvatar = await getAvatar(await getUser(workspace.owner));
-        const collaboratorsAvatars = await Promise.all(
-          workspace.collaborators.map(async (collaborator: string) => await getAvatar(await getUser(collaborator)))
-        );
-        workspace.avatar = [ownerAvatar, ...collaboratorsAvatars];
-      }
-      setWorkspaces(workspaces);
-    };
-
-    fetchWorkspaces();
     setDocumentTitle("Your workspaces");
   }, []);
 
-  if (workspaces.length === 0) return <Loading />;
+  if (!workspacesQuery.isFetched) return <Loading />;
+
+  const workspaces = workspacesQuery.data!.items;
 
   const createWorkspace = CreateWorkspaceModal({ user });
 
@@ -42,7 +34,7 @@ export default function WorkspaceHome() {
       <Title order={2}>Your workspaces</Title>
       <Divider my="lg" />
       <Grid mt="md" mb="xl">
-        {workspaces.map((item: RecordModel) => (
+        {workspaces.map((item) => (
           <Grid.Col span={{ base: 12, md: 6 }}>
             <Button
               p="lg"
diff --git a/src/vite-env.d.ts b/src/vite-env.d.ts
index 11f02fe..b1351d0 100644
--- a/src/vite-env.d.ts
+++ b/src/vite-env.d.ts
@@ -1 +1,9 @@
 /// <reference types="vite/client" />
+
+interface ImportMetaEnv {
+  readonly VITE_POCKETBASE_URL: string;
+}
+
+interface ImportMeta {
+  readonly env: ImportMetaEnv;
+}
